package com.eosos.components.main;

import java.util.ArrayList;
import java.util.HashMap;

import org.json.JSONArray;

import android.content.Context;
import android.location.Location;
import android.text.Html;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;

import com.androidquery.AQuery;
import com.androidquery.callback.BitmapAjaxCallback;
import com.eosos.common.classes.IjoomerUtilities;
import com.eosos.common.classes.ViewHolder;
import com.eosos.custom.interfaces.IjoomerSharedPreferences;
import com.eosos.customviews.IjoomerAutoCompleteTextView;
import com.eosos.customviews.IjoomerIndexableListView;
import com.eosos.customviews.IjoomerRatingBar;
import com.eosos.customviews.IjoomerTextView;
import com.eosos.library.EososDataProvider;
import com.eosos.src.R;
import com.smart.framework.CustomAlertNeutral;
import com.smart.framework.ItemView;
import com.smart.framework.SmartActivity;
import com.smart.framework.SmartFragment;
import com.smart.framework.SmartListAdapterIndexScrolling;
import com.smart.framework.SmartListItem;

public class EososFavouriteEntryListFragment extends SmartFragment implements EososTagHolder, IjoomerSharedPreferences {

    private IjoomerIndexableListView listFav;

    private ArrayList<SmartListItem> listData = new ArrayList<SmartListItem>();
    public ArrayList<HashMap<String, String>> clubs = new ArrayList<HashMap<String, String>>();
    private SmartListAdapterIndexScrolling listAdapterWithHolder;
    private EososDataProvider dataProvider;
    private HashMap<String, Integer> alphaIndexer;
    private ArrayList<String> sectionArray;
    private ArrayList<HashMap<String, String>> autoCompleteResultList;
    private IjoomerAutoCompleteTextView edtClub;
    private String[] sections;
    public boolean DistanceInKms = false;
    private HashMap<String,Integer> noOfCityMap = new HashMap<String, Integer>();

    private String latitude, longitude;
    private boolean showIsNoContent;

    private AQuery aQuery;

    public EososFavouriteEntryListFragment(boolean showIsNoContent) {
        this.showIsNoContent=showIsNoContent;
    }

    @Override
    public int setLayoutId() {
        return R.layout.eosos_entry_fragment;
    }

    @Override
    public void initComponents(View currentView) {
        listFav = (IjoomerIndexableListView) currentView.findViewById(R.id.directoryList);
        listFav.setSelector(R.drawable.list_item_selector);
        aQuery = new AQuery(getActivity());
        edtClub = (IjoomerAutoCompleteTextView) currentView.findViewById(R.id.edtClub);
        dataProvider = new EososDataProvider(getActivity());
        listFav.setFastScrollEnabled(true);
        sectionArray = new ArrayList<String>();
        ((ImageView) ((SmartActivity) getActivity()).getHeaderView().findViewById(R.id.imgDirection)).setVisibility(View.GONE);
    }

    @Override
    public void onResume() {
        super.onResume();
        listFav.setAdapter(null);
        listFav.setDivider(null);
        edtClub.setVisibility(View.GONE);
        getFavourites();
    }

    @Override
    public void prepareViews(View currentView) {
        edtClub.setAdapter(new autoCompleteAdapter(getActivity(), R.layout.ijoomer_spinner_dropdown_item));
        latitude = ((SmartActivity) getActivity()).getLatitude();
        longitude = ((SmartActivity) getActivity()).getLongitude();
    }

    public void getFavourites() {

        clubs = dataProvider.getFavouritesList();
        if(clubs!=null && clubs.size()>0){
            prepareList(dataProvider.getFavouritesList());
            listAdapterWithHolder = getListAdapter(listData);
            listFav.setAdapter(listAdapterWithHolder);
            edtClub.setText("");
        }else{
            if(showIsNoContent){
                IjoomerUtilities.getCustomOkDialog(getString(R.string.favourites), getString(R.string.code204), getString(R.string.ok), R.layout.ijoomer_ok_dialog,
                        new CustomAlertNeutral() {

                            @Override
                            public void NeutralMethod() {

                            }
                        });
            }
        }
    }

    public void showNoContentDialog(){
        if(!showIsNoContent && listData.size()<=0){
            IjoomerUtilities.getCustomOkDialog(getString(R.string.favourites), getString(R.string.code204), getString(R.string.ok), R.layout.ijoomer_ok_dialog,
                    new CustomAlertNeutral() {

                        @Override
                        public void NeutralMethod() {

                        }
                    });
        }
    }

    private class autoCompleteAdapter extends ArrayAdapter<String> implements Filterable {

        public autoCompleteAdapter(Context context, int textViewResourceId) {
            super(context, textViewResourceId);
        }

        @Override
        public int getCount() {
            return autoCompleteResultList.size();
        }

        @Override
        public String getItem(int position) {
            return autoCompleteResultList.get(position).get("title");
        }

        @Override
        public Filter getFilter() {
            Filter filter = new Filter() {
                @Override
                protected FilterResults performFiltering(final CharSequence constraint) {
                    final FilterResults filterResults = new FilterResults();
                    autoCompleteResultList = new ArrayList<HashMap<String, String>>();
                    if (constraint != null && constraint.toString().trim().length() > 1) {

                        for (int i = 0; i < clubs.size(); i++) {
                            if (clubs.get(i).get("title").toLowerCase().contains(constraint.toString().toLowerCase())) {
                                autoCompleteResultList.add(clubs.get(i));
                            }

                        }
                        filterResults.values = autoCompleteResultList;
                        filterResults.count = autoCompleteResultList.size();

                    }
                    return filterResults;
                }

                @Override
                protected void publishResults(CharSequence constraint, FilterResults results) {
                    if (results != null && results.count > 0) {
                        notifyDataSetChanged();
                    } else {
                        notifyDataSetInvalidated();
                    }
                }
            };
            return filter;
        }
    }

    @Override
    public void setActionListeners(View currentView) {

        edtClub.setOnEditorActionListener(new OnEditorActionListener() {

            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if (actionId == EditorInfo.IME_ACTION_SEARCH && (autoCompleteResultList == null || autoCompleteResultList.size() == 0)) {
                    edtClub.setError("No match found");
                    return true;
                }
                return false;
            }
        });
        edtClub.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View arg1, int pos, long arg3) {

                try {
                    if (autoCompleteResultList != null && (HashMap<String, String>) autoCompleteResultList.get(pos) != null) {
                        ((SmartActivity) getActivity()).loadNew(EososEntryDetailActivityNew.class, getActivity(), false, "IN_ID",
                                ((HashMap<String, String>) autoCompleteResultList.get(pos)).get("id"));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        });
        listFav.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
                try {
                    ((SmartActivity) getActivity()).loadNew(EososEntryDetailActivityNew.class, getActivity(), false, "IN_ID", clubs.get(arg2).get("id"));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

    }

    public ArrayList<HashMap<String, String>> getClubs() {
        return clubs;
    }

    public void prepareList(ArrayList<HashMap<String, String>> data) {
        sectionArray.clear();
        if (data != null) {
            alphaIndexer = new HashMap<String, Integer>();
            sectionArray = new ArrayList<String>();
            listData.clear();
            noOfCityMap.clear();
            for (int i = 0; i < data.size(); i++) {
                HashMap<String, String> hashMap = data.get(i);
                SmartListItem item = new SmartListItem();
                item.setItemLayout(R.layout.eosos_directory_list_item);
                ArrayList<Object> obj = new ArrayList<Object>();
                obj.add(hashMap);
                if (!alphaIndexer.containsKey(hashMap.get("city"))) {
                    alphaIndexer.put(hashMap.get("city"), i);
                    sectionArray.add(hashMap.get("city"));
                    obj.add(hashMap.get("city"));
                    noOfCityMap.put(hashMap.get("city"),1);
                }else{
                    int total =noOfCityMap.get(hashMap.get("city"))+1;
                    noOfCityMap.put(hashMap.get("city"),total);
                }
                item.setValues(obj);
                listData.add(item);

            }
            setSections();
        }
    }

    public void setSections() {

        sections = new String[sectionArray.size()];
        for (int i = 0; i < sectionArray.size(); i++) {
            String ch = sectionArray.get(i).substring(0, 1);
            ch = ch.toUpperCase();
            sections[i] = ch;
        }

    }

    public SmartListAdapterIndexScrolling getListAdapter(final ArrayList<SmartListItem> listData) {

        SmartListAdapterIndexScrolling adapterWithHolder = new SmartListAdapterIndexScrolling(getActivity(), R.layout.eosos_directory_list_item, listData, sections, alphaIndexer,
                sectionArray, new ItemView() {

            @Override
            public View setItemView(int position, View v, SmartListItem item, final ViewHolder holder) {

                holder.eososTxtTitle = (IjoomerTextView) v.findViewById(R.id.eososTxtTitle);
                holder.eososTxtLocation = (IjoomerTextView) v.findViewById(R.id.eososTxtLocation);
                holder.eososTxtDistance = (IjoomerTextView) v.findViewById(R.id.eososTxtDistance);
                holder.eososImgClub = (ImageView) v.findViewById(R.id.eososImgClub);
                holder.rtbRating = (IjoomerRatingBar) v.findViewById(R.id.rtbRating);
                holder.eososTxtCity = (IjoomerTextView) v.findViewById(R.id.eososTxtCity);
                holder.eososProgress = (ProgressBar) v.findViewById(R.id.progress);
                holder.divider = (View) v.findViewById(R.id.divider);
                holder.divider.setVisibility(View.VISIBLE);
                holder.rtbRating.setVisibility(View.GONE);
                holder.eososTxtDistance.setVisibility(View.GONE);
                holder.eososTxtCity.setVisibility(View.GONE);
                holder.eososProgress.setVisibility(View.GONE);
                if (item.getValues().size() > 1) {
                    holder.eososTxtCity.setText(item.getValues().get(1).toString());
                    holder.eososTxtCity.setVisibility(View.VISIBLE);
                    if(noOfCityMap.containsKey(item.getValues().get(1).toString()) && noOfCityMap.get(item.getValues().get(1).toString())==1){
                        holder.divider.setVisibility(View.GONE);
                    }
                }else if((position+1)< listData.size() && listData.get(position+1).getValues().size()>1){
                    holder.divider.setVisibility(View.GONE);
                }

                if(position == listData.size()-1){
                    holder.divider.setVisibility(View.VISIBLE);
                }
                @SuppressWarnings("unchecked")
                HashMap<String, String> value = (HashMap<String, String>) item.getValues().get(0);

                holder.eososTxtLocation.setText(Html.fromHtml(value.get("city")).toString().trim());
                holder.eososTxtTitle.setText(value.get("title").trim());

                double distance;
                String distanceData = null;
                try {
                    distance =
                            getDistance(Double.parseDouble(latitude),
                                    Double.parseDouble(longitude),
                                    Double.parseDouble(value.get("latitude")),
                                    Double.parseDouble(value.get("longitude")));

                    distanceData = String.format("%.1f", distance);
                    if (DistanceInKms)
                        holder.eososTxtDistance.setText(distanceData +
                                " kms");
                    else
                        holder.eososTxtDistance.setText(distanceData +
                                " miles");
                    holder.rtbRating.setStarRating(Float.parseFloat(value.get(AVERAGERATING)) / 2);
                    holder.rtbRating.setVisibility(View.VISIBLE);

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if(aQuery.getCachedImage(value.get("image1"))==null){
                        holder.eososProgress.setVisibility(View.VISIBLE);
                        aQuery.id(holder.eososImgClub).progress(holder.eososProgress).image(value.get("image1"),true,true);
                    }else{
                        holder.eososProgress.setVisibility(View.GONE);
                        aQuery.id(holder.eososImgClub).image(aQuery.getCachedImage(value.get("image1")));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return v;
            }

            @Override
            public View setItemView(int position, View v, SmartListItem item) {
                return null;
            }
        });
        return adapterWithHolder;
    }

    @Override
    public View setLayoutView() {
        return null;
    }

    public void changeDistanceUnit(boolean InKms) {
        DistanceInKms = InKms;
        if(listAdapterWithHolder!=null){
            listAdapterWithHolder.notifyDataSetChanged();
        }

    }

    private double getDistance(double fromLat, double fromLng, double toLat, double toLng) {
        try {
            float[] dist = new float[1];
            Location.distanceBetween(fromLat, fromLng, toLat, toLng, dist);
            if (DistanceInKms)
                return (dist[0] * 0.001);
            else
                return (dist[0] * 0.00062137119); // / 100000;
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }

}
